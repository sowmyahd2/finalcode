{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nconst BASE_URL = 'http://13.201.130.241/reactapi/public/v1/';\nexport const getSearch = createAsyncThunk('data/getSearch', async _ref => {\n  let {\n    text,\n    selectedCity\n  } = _ref;\n  try {\n    const response = await fetch(`${BASE_URL}Search/autocomplete`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        term: text,\n        city: selectedCity,\n        departmentId: 'All'\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to send OTP');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    // Handle error\n    throw error;\n  }\n});\nconst searchSlice = createSlice({\n  name: 'search',\n  initialState: {\n    stores: [],\n    brands: [],\n    loading: false\n  },\n  reducers: {\n    // ...\n  },\n  extraReducers: builder => {\n    builder.addCase(getSearch.pending, state => {\n      state.loading = true;\n    }).addCase(getSearch.fulfilled, (state, action) => {\n      state.loading = false;\n      state.stores = action.payload.data.stores;\n      state.brands = action.payload.data.brands;\n    }).addCase(getSearch.rejected, state => {\n      state.loading = false;\n      // Handle the error state if needed\n    });\n  }\n});\n\nexport default searchSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","BASE_URL","getSearch","_ref","text","selectedCity","response","fetch","method","headers","body","JSON","stringify","term","city","departmentId","ok","Error","data","json","error","searchSlice","name","initialState","stores","brands","loading","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["D:/react/website/finalcode/src/Redux/Slice/SearchSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nconst BASE_URL = 'http://13.201.130.241/reactapi/public/v1/';\r\nexport const getSearch = createAsyncThunk(\r\n  'data/getSearch',\r\n  async ({ text, selectedCity }) => {\r\n   try {\r\n\r\n       const response = await fetch(`${BASE_URL}Search/autocomplete`, {\r\n           method: 'POST',\r\n           headers: {\r\n             'Content-Type': 'application/json',\r\n           },\r\n           body: JSON.stringify({\r\n                    term: text,\r\n                    city: selectedCity,\r\n                    departmentId: 'All',\r\n                  })\r\n         });\r\n         if (!response.ok) {\r\n           throw new Error('Failed to send OTP');\r\n         }\r\n\r\n    const data = await response.json();\r\n\r\n    return data;\r\n      } catch (error) {\r\n        // Handle error\r\n        throw error;\r\n      }\r\n  }\r\n\r\n);\r\n\r\nconst searchSlice = createSlice({\r\n  name: 'search',\r\n  initialState: {\r\n    stores: [],\r\n    brands: [],\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    // ...\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getSearch.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(getSearch.fulfilled, (state, action) => {\r\n\r\n        state.loading = false;\r\n        state.stores = action.payload.data.stores;\r\n        state.brands = action.payload.data.brands;\r\n      })\r\n      .addCase(getSearch.rejected, (state) => {\r\n        state.loading = false;\r\n        // Handle the error state if needed\r\n      });\r\n  },\r\n});\r\n\r\nexport default searchSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,MAAMC,QAAQ,GAAG,2CAA2C;AAC5D,OAAO,MAAMC,SAAS,GAAGH,gBAAgB,CACvC,gBAAgB,EAChB,MAAAI,IAAA,IAAkC;EAAA,IAA3B;IAAEC,IAAI;IAAEC;EAAa,CAAC,GAAAF,IAAA;EAC5B,IAAI;IAEA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,QAAS,qBAAoB,EAAE;MAC3DO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACZC,IAAI,EAAET,IAAI;QACVU,IAAI,EAAET,YAAY;QAClBU,YAAY,EAAE;MAChB,CAAC;IACV,CAAC,CAAC;IACF,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IACvC;IAEL,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;IAElC,OAAOD,IAAI;EACT,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd;IACA,MAAMA,KAAK;EACb;AACJ,CAEF,CAAC;AAED,MAAMC,WAAW,GAAGrB,WAAW,CAAC;EAC9BsB,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACZC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,EAAE;IACVC,OAAO,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC5B,SAAS,CAAC6B,OAAO,EAAGC,KAAK,IAAK;MACrCA,KAAK,CAACN,OAAO,GAAG,IAAI;IACtB,CAAC,CAAC,CACDI,OAAO,CAAC5B,SAAS,CAAC+B,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAE/CF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACR,MAAM,GAAGU,MAAM,CAACC,OAAO,CAACjB,IAAI,CAACM,MAAM;MACzCQ,KAAK,CAACP,MAAM,GAAGS,MAAM,CAACC,OAAO,CAACjB,IAAI,CAACO,MAAM;IAC3C,CAAC,CAAC,CACDK,OAAO,CAAC5B,SAAS,CAACkC,QAAQ,EAAGJ,KAAK,IAAK;MACtCA,KAAK,CAACN,OAAO,GAAG,KAAK;MACrB;IACF,CAAC,CAAC;EACN;AACF,CAAC,CAAC;;AAEF,eAAeL,WAAW,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}