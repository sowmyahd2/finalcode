{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\nimport equals from \"./equals.js\";\nimport path from \"./path.js\";\n/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int | Symbol\n * @sig a -> [Idx] -> {a} -> Boolean\n * @param {*} val The value to compare the nested property with\n * @param {Array} path The path of the nested property to use\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @see R.whereEq, R.propEq, R.pathSatisfies, R.equals\n * @example\n *\n *      const user1 = { address: { zipCode: 90210 } };\n *      const user2 = { address: { zipCode: 55555 } };\n *      const user3 = { name: 'Bob' };\n *      const users = [ user1, user2, user3 ];\n *      const isFamous = R.pathEq(90210, ['address', 'zipCode']);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\n\nvar pathEq = /*#__PURE__*/\n_curry3(function pathEq(val, _path, obj) {\n  return equals(path(_path, obj), val);\n});\nexport default pathEq;","map":{"version":3,"names":["_curry3","equals","path","pathEq","val","_path","obj"],"sources":["D:/react/website/finalcode/node_modules/ramda/es/pathEq.js"],"sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\nimport equals from \"./equals.js\";\nimport path from \"./path.js\";\n/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int | Symbol\n * @sig a -> [Idx] -> {a} -> Boolean\n * @param {*} val The value to compare the nested property with\n * @param {Array} path The path of the nested property to use\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @see R.whereEq, R.propEq, R.pathSatisfies, R.equals\n * @example\n *\n *      const user1 = { address: { zipCode: 90210 } };\n *      const user2 = { address: { zipCode: 55555 } };\n *      const user3 = { name: 'Bob' };\n *      const users = [ user1, user2, user3 ];\n *      const isFamous = R.pathEq(90210, ['address', 'zipCode']);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\n\nvar pathEq =\n/*#__PURE__*/\n_curry3(function pathEq(val, _path, obj) {\n  return equals(path(_path, obj), val);\n});\n\nexport default pathEq;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAOC,IAAI,MAAM,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GACV;AACAH,OAAO,CAAC,SAASG,MAAMA,CAACC,GAAG,EAAEC,KAAK,EAAEC,GAAG,EAAE;EACvC,OAAOL,MAAM,CAACC,IAAI,CAACG,KAAK,EAAEC,GAAG,CAAC,EAAEF,GAAG,CAAC;AACtC,CAAC,CAAC;AAEF,eAAeD,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}