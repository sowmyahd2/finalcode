{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nconst BASE_URL = 'http://13.201.130.241/reactapi/public/v1/';\nexport const getSearch = createAsyncThunk('search/getSearch', async _ref => {\n  let {\n    selectedCity,\n    term\n  } = _ref;\n  try {\n    const body = JSON.stringify({\n      city: selectedCity,\n      term,\n      departmentId: \"All\"\n    });\n    const response = await fetch(`${BASE_URL}search/autocomplete`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.error('Error fetching departments:', error);\n    throw error;\n  }\n});\nconst searchSlice = createSlice({\n  name: 'search',\n  initialState: {\n    stores: [],\n    brands: [],\n    category: [],\n    loading: false\n  },\n  reducers: {\n    // ...\n  },\n  extraReducers: builder => {\n    builder.addCase(getSearch.pending, state => {\n      state.loading = true;\n    }).addCase(getSearch.fulfilled, (state, action) => {\n      state.loading = false;\n      state.stores = action.payload.data.stores;\n      state.brands = action.payload.data.brands;\n      state.category = action.payload.data.category;\n    }).addCase(getSearch.rejected, state => {\n      state.loading = false;\n      // Handle the error state if needed\n    });\n  }\n});\n\nexport default searchSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","BASE_URL","getSearch","_ref","selectedCity","term","body","JSON","stringify","city","departmentId","response","fetch","method","headers","ok","Error","status","json","error","console","searchSlice","name","initialState","stores","brands","category","loading","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","data","rejected","reducer"],"sources":["D:/react/website/finalcode/src/Redux/Slice/SearchSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nconst BASE_URL = 'http://13.201.130.241/reactapi/public/v1/';\r\nexport const getSearch = createAsyncThunk('search/getSearch', async ({ selectedCity, term }) => {\r\n    try {\r\n      const body = JSON.stringify({\r\n        city: selectedCity,\r\n        term,\r\n        departmentId: \"All\"\r\n      });\r\n\r\n      const response = await fetch(`${BASE_URL}search/autocomplete`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: body\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n  \r\n      const json = await response.json();\r\n      \r\n      return json;\r\n    } catch (error) {\r\n      console.error('Error fetching departments:', error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\nconst searchSlice = createSlice({\r\n  name: 'search',\r\n  initialState: {\r\n    stores: [],\r\n    brands: [],\r\n    category: [],\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    // ...\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getSearch.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(getSearch.fulfilled, (state, action) => {\r\n\r\n        state.loading = false;\r\n        state.stores = action.payload.data.stores;\r\n        state.brands = action.payload.data.brands;\r\n        state.category=action.payload.data.category\r\n      })\r\n      .addCase(getSearch.rejected, (state) => {\r\n        state.loading = false;\r\n        // Handle the error state if needed\r\n      });\r\n  },\r\n});\r\n\r\nexport default searchSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,MAAMC,QAAQ,GAAG,2CAA2C;AAC5D,OAAO,MAAMC,SAAS,GAAGH,gBAAgB,CAAC,kBAAkB,EAAE,MAAAI,IAAA,IAAkC;EAAA,IAA3B;IAAEC,YAAY;IAAEC;EAAK,CAAC,GAAAF,IAAA;EACvF,IAAI;IACF,MAAMG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;MAC1BC,IAAI,EAAEL,YAAY;MAClBC,IAAI;MACJK,YAAY,EAAE;IAChB,CAAC,CAAC;IAEF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEX,QAAS,qBAAoB,EAAE;MAC7DY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDR,IAAI,EAAEA;IACR,CAAC,CAAC;IAEF,IAAI,CAACK,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBL,QAAQ,CAACM,MAAO,EAAC,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC,CAAC;AAEJ,MAAME,WAAW,GAAGrB,WAAW,CAAC;EAC9BsB,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACZC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZC,OAAO,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC7B,SAAS,CAAC8B,OAAO,EAAGC,KAAK,IAAK;MACrCA,KAAK,CAACN,OAAO,GAAG,IAAI;IACtB,CAAC,CAAC,CACDI,OAAO,CAAC7B,SAAS,CAACgC,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAE/CF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACT,MAAM,GAAGW,MAAM,CAACC,OAAO,CAACC,IAAI,CAACb,MAAM;MACzCS,KAAK,CAACR,MAAM,GAAGU,MAAM,CAACC,OAAO,CAACC,IAAI,CAACZ,MAAM;MACzCQ,KAAK,CAACP,QAAQ,GAACS,MAAM,CAACC,OAAO,CAACC,IAAI,CAACX,QAAQ;IAC7C,CAAC,CAAC,CACDK,OAAO,CAAC7B,SAAS,CAACoC,QAAQ,EAAGL,KAAK,IAAK;MACtCA,KAAK,CAACN,OAAO,GAAG,KAAK;MACrB;IACF,CAAC,CAAC;EACN;AACF,CAAC,CAAC;;AAEF,eAAeN,WAAW,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}