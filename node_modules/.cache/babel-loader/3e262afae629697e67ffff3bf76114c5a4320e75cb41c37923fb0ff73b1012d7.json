{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport BASE_URL from '../../Config/apii';\nexport const getBrowseByMainCategory = createAsyncThunk('category/browsebycategory', async _ref => {\n  let {\n    selectedcity,\n    id\n  } = _ref;\n  try {\n    const response = await fetch(`${BASE_URL}maincategory/browseby/${id}/${selectedcity}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    console.log(\"branddata\", response.data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching departments:', error);\n    throw error;\n  }\n});\nexport const getCategory = createAsyncThunk('category/catsubcategory', async _ref2 => {\n  let {\n    selectedcity,\n    id\n  } = _ref2;\n  try {\n    const response = await fetch(`${BASE_URL}Category/subcategory/${id}/${selectedcity}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    console.log(\"branddata\", response.data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching departments:', error);\n    throw error;\n  }\n});\nconst categorySlice = createSlice({\n  name: 'brand',\n  initialState: {\n    browsebycatstores: [],\n    browsebycatbrands: [],\n    catsubcategory: [],\n    isLoading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getBrowseByMainCategory.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(getBrowseByMainCategory.fulfilled, (state, action) => {\n      state.browsebycatstores = action.payload.data.store;\n      state.browsebycatbrands = action.payload.data.brand;\n      state.isLoading = false;\n      state.error = null;\n    }).addCase(getBrowseByMainCategory.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }).addCase(getCategory.fulfilled, (state, action) => {\n      state.catsubcategory = action.payload.data.category;\n      state.catbrands = action.payload.data.brands;\n      state.catstorebrands = action.payload.data.localBrands;\n      state.isLoading = false;\n      state.error = null;\n    });\n  }\n});\nexport default categorySlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","BASE_URL","getBrowseByMainCategory","_ref","selectedcity","id","response","fetch","ok","Error","data","json","console","log","error","getCategory","_ref2","categorySlice","name","initialState","browsebycatstores","browsebycatbrands","catsubcategory","isLoading","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","store","brand","rejected","category","catbrands","brands","catstorebrands","localBrands","reducer"],"sources":["D:/react/website/finalcode/src/Redux/Slice/CategorySlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nimport  BASE_URL  from '../../Config/apii';\r\n\r\nexport const getBrowseByMainCategory = createAsyncThunk(\r\n  'category/browsebycategory',\r\n  async ({ selectedcity,id }) => {\r\n    try {\r\n      \r\n      \r\n      const response = await fetch(`${BASE_URL}maincategory/browseby/${id}/${selectedcity}`);\r\n    \r\n   \r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data = await response.json();\r\n      console.log(\"branddata\",response.data)\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching departments:', error);\r\n    throw error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const getCategory = createAsyncThunk(\r\n  'category/catsubcategory',\r\n  async ({ selectedcity,id }) => {\r\n    try {\r\n      \r\n      \r\n      const response = await fetch(`${BASE_URL}Category/subcategory/${id}/${selectedcity}`);\r\n    \r\n   \r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data = await response.json();\r\n      console.log(\"branddata\",response.data)\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching departments:', error);\r\n    throw error;\r\n    }\r\n  }\r\n);\r\n\r\n\r\n\r\n\r\nconst categorySlice = createSlice({\r\n  name: 'brand',\r\n  initialState: {\r\n     browsebycatstores: [],\r\n     browsebycatbrands: [],\r\n     catsubcategory:[],\r\n \r\n     \r\n       isLoading: false, error: null },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getBrowseByMainCategory.pending, (state) => {\r\n        state.isLoading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(getBrowseByMainCategory.fulfilled, (state, action) => {\r\n     \r\n        state.browsebycatstores = action.payload.data.store;\r\n        state.browsebycatbrands = action.payload.data.brand;\r\n        state.isLoading = false;\r\n        state.error = null;\r\n      })\r\n      .addCase(getBrowseByMainCategory.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = action.payload;\r\n      })\r\n      .addCase(getCategory.fulfilled, (state, action) => {\r\n        \r\n           state.catsubcategory = action.payload.data.category;\r\n           state.catbrands = action.payload.data.brands;\r\n           state.catstorebrands = action.payload.data.localBrands;\r\n           state.isLoading = false;\r\n           state.error = null;\r\n         });\r\n      \r\n  },\r\n});\r\n\r\nexport default categorySlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}