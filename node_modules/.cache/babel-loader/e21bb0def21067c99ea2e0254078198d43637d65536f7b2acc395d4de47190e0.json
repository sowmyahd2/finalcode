{"ast":null,"code":"import Api from '../../Config/Api';\nimport Type from './Types';\nexport const getBrandcat = (city, id) => async dispatch => {\n  try {\n    const response = await Api.get('brands/getcatbrand/' + city + '/' + id);\n    if (response.message === \"success\") {\n      dispatch({\n        type: Type.brandcatSuccess,\n        payload: response.data\n      });\n    }\n  } catch (error) {}\n};\nexport const getBrand = () => async dispatch => {\n  try {\n    const response = await Api.get('brands');\n    if (response.message === \"success\") {\n      dispatch({\n        type: Type.brandSuccess,\n        payload: response.data\n      });\n    }\n  } catch (error) {}\n};\nexport const getBrandOffer = (city, id) => async dispatch => {\n  try {\n    const response = await Api.get('brands/offers/' + city + \"/\" + id);\n    if (response.message === \"success\") {\n      dispatch({\n        type: Type.brandOfferSuccess,\n        payload: response.data\n      });\n    }\n  } catch (error) {}\n};\nexport const getBrandOfferDetail = (city, DepartmentId, BrandId) => async dispatch => {\n  try {\n    const response = await Api.get('brands/offers/products/' + city + \"/\" + DepartmentId + \"/\" + BrandId);\n    if (response.message === \"success\") {\n      dispatch({\n        type: Type.brandOfferDetailSuccess,\n        payload: response.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: Type.brandOfferDetailFailure,\n      payload: error.message\n    });\n  }\n};\nexport const getBrandCategory = (city, BrandId) => async dispatch => {\n  try {\n    const response = await Api.get('products/brandcategory/' + city + \"/\" + BrandId);\n    if (response.message === \"success\") {\n      dispatch({\n        type: Type.brandcategorySuccess,\n        payload: response.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: Type.brandcategoryFailure,\n      payload: error.message\n    });\n  }\n};\nexport const getBrandMainCategory = function (city, DepartmentId, BrandId) {\n  let limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 24;\n  let offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  let brandIds = arguments.length > 5 ? arguments[5] : undefined;\n  let price = arguments.length > 6 ? arguments[6] : undefined;\n  let sort = arguments.length > 7 ? arguments[7] : undefined;\n  return async dispatch => {\n    try {\n      const response = await Api.get('brands/maincategory/' + city + \"/\" + DepartmentId + \"/\" + BrandId + \"?limit=\" + limit + \"&offset=\" + offset + \"&brandIds=\" + brandIds + \"&price=\" + price + \"&sort=\" + sort);\n      if (response.message === \"success\") {\n        dispatch({\n          type: Type.brandMainCategorySuccess,\n          payload: response.data\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: Type.brandMainCategoryFailure,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const getBrandSubCategory = function (city, DepartmentId, BrandId) {\n  let limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 24;\n  let offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  let brandIds = arguments.length > 5 ? arguments[5] : undefined;\n  let price = arguments.length > 6 ? arguments[6] : undefined;\n  let sort = arguments.length > 7 ? arguments[7] : undefined;\n  return async dispatch => {\n    try {\n      const response = await Api.get('brands/subcategory/' + city + \"/\" + DepartmentId + \"/\" + BrandId + \"?limit=\" + limit + \"&offset=\" + offset + \"&brandIds=\" + brandIds + \"&price=\" + price + \"&sort=\" + sort);\n      if (response.message === \"success\") {\n        dispatch({\n          type: Type.brandSubCategorySuccess,\n          payload: response.data\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: Type.brandSubCategoryFailure,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const getbrowseByBrandDepartment = (city, BrandId, DepartmentId) => async dispatch => {\n  try {\n    const response = await Api.get('brands/departmentBrowseby/' + BrandId + '/' + DepartmentId + \"/\" + city);\n    if (response.message === \"success\") {\n      dispatch({\n        type: Type.browseByBrandDepartmentSuccess,\n        payload: response.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: Type.browseByBrandDepartmentFailure,\n      payload: error.message\n    });\n  }\n};\nexport const getbrowseByBrandCategory = (city, BrandId, DepartmentId) => async dispatch => {\n  try {\n    const response = await Api.get('brands/categoryBrowseby/' + BrandId + '/' + DepartmentId + \"/\" + city);\n    if (response.message === \"success\") {\n      dispatch({\n        type: Type.browseByBrandCategorySuccess,\n        payload: response.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: Type.browseByBrandCategoryFailure,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"names":["Api","Type","getBrandcat","city","id","dispatch","response","get","message","type","brandcatSuccess","payload","data","error","getBrand","brandSuccess","getBrandOffer","brandOfferSuccess","getBrandOfferDetail","DepartmentId","BrandId","brandOfferDetailSuccess","brandOfferDetailFailure","getBrandCategory","brandcategorySuccess","brandcategoryFailure","getBrandMainCategory","limit","arguments","length","undefined","offset","brandIds","price","sort","brandMainCategorySuccess","brandMainCategoryFailure","getBrandSubCategory","brandSubCategorySuccess","brandSubCategoryFailure","getbrowseByBrandDepartment","browseByBrandDepartmentSuccess","browseByBrandDepartmentFailure","getbrowseByBrandCategory","browseByBrandCategorySuccess","browseByBrandCategoryFailure"],"sources":["D:/react/website/finalcode/src/Redux/Action/BrandAction.js"],"sourcesContent":["import Api from '../../Config/Api';\r\nimport Type from './Types';\r\n\r\nexport const  getBrandcat= (city,id) => async dispatch => {\r\n    try\r\n    {\r\n        const response = await Api.get('brands/getcatbrand/'+city+'/'+id)\r\n       \r\n        if(response.message === \"success\"){\r\n            dispatch({\r\n                    type : Type.brandcatSuccess,\r\n                    payload : response.data\r\n                })\r\n            }\r\n        } catch(error){\r\n         \r\n        }\r\n} \r\nexport const getBrand = () => async dispatch => {\r\n    try\r\n    {\r\n        const response = await Api.get('brands')\r\n        if(response.message === \"success\"){\r\n            dispatch({\r\n                    type : Type.brandSuccess,\r\n                    payload : response.data\r\n                })\r\n            }\r\n        } catch(error){\r\n         \r\n        }\r\n}\r\nexport const getBrandOffer = (city,id) => async dispatch => {\r\n    try\r\n    {\r\n        const response = await Api.get('brands/offers/'+city+\"/\"+id)\r\n        if(response.message === \"success\"){\r\n            dispatch({\r\n                    type : Type.brandOfferSuccess,\r\n                    payload : response.data\r\n                })\r\n            }\r\n        } catch(error){  \r\n    }\r\n} \r\n\r\nexport const getBrandOfferDetail = (city,DepartmentId,BrandId) => async dispatch => {\r\n    try\r\n    {\r\n        const response = await Api.get('brands/offers/products/'+city+\"/\"+DepartmentId+\"/\"+BrandId)\r\n        if(response.message === \"success\"){\r\n            dispatch({\r\n                    type : Type.brandOfferDetailSuccess,\r\n                    payload : response.data\r\n                })\r\n            }\r\n        } catch(error){  \r\n            dispatch({\r\n                type : Type.brandOfferDetailFailure,\r\n                payload : error.message\r\n            })\r\n    }\r\n} \r\n\r\n\r\nexport const getBrandCategory = (city,BrandId) => async dispatch => {\r\n    try\r\n    {\r\n        const response = await Api.get('products/brandcategory/'+city+\"/\"+BrandId)\r\n        if(response.message === \"success\"){\r\n            dispatch({\r\n                    type : Type.brandcategorySuccess,\r\n                    payload : response.data\r\n                })\r\n            }\r\n        } catch(error){  \r\n            dispatch({\r\n                type : Type.brandcategoryFailure,\r\n                payload : error.message\r\n            })\r\n    }\r\n} \r\n\r\nexport const getBrandMainCategory = (city,DepartmentId,BrandId,limit=24, offset=0, brandIds, price,sort) => async dispatch => {\r\n    try\r\n    {\r\n        const response = await Api.get('brands/maincategory/'+city+\"/\"+DepartmentId+\"/\"+BrandId+\"?limit=\"+limit+\"&offset=\"+offset+\"&brandIds=\"+brandIds+\"&price=\"+price+\"&sort=\"+sort)\r\n        if(response.message === \"success\"){\r\n            dispatch({\r\n                    type : Type.brandMainCategorySuccess,\r\n                    payload : response.data\r\n                })\r\n            }\r\n        } catch(error){  \r\n            dispatch({\r\n                type : Type.brandMainCategoryFailure,\r\n                payload : error.message\r\n            })\r\n    }\r\n} \r\n\r\nexport const getBrandSubCategory = (city,DepartmentId,BrandId, limit=24, offset=0, brandIds, price,sort) => async dispatch => {\r\n    try\r\n    {\r\n        const response = await Api.get('brands/subcategory/'+city+\"/\"+DepartmentId+\"/\"+BrandId+\"?limit=\"+limit+\"&offset=\"+offset+\"&brandIds=\"+brandIds+\"&price=\"+price+\"&sort=\"+sort)\r\n        if(response.message === \"success\"){\r\n            dispatch({\r\n                    type : Type.brandSubCategorySuccess,\r\n                    payload : response.data\r\n                })\r\n            }\r\n        } catch(error){  \r\n            dispatch({\r\n                type : Type.brandSubCategoryFailure,\r\n                payload : error.message\r\n            })\r\n    }\r\n}\r\n\r\nexport const getbrowseByBrandDepartment = (city,BrandId,DepartmentId) => async dispatch => {\r\n    try\r\n    {\r\n        const response = await Api.get('brands/departmentBrowseby/'+BrandId+'/'+DepartmentId+\"/\"+city)\r\n        if(response.message === \"success\"){\r\n            dispatch({\r\n                    type : Type.browseByBrandDepartmentSuccess,\r\n                    payload : response.data\r\n                })\r\n            }\r\n        } catch(error){\r\n            dispatch({\r\n                type : Type.browseByBrandDepartmentFailure,\r\n                payload : error.message\r\n            })\r\n            \r\n         \r\n        }\r\n}\r\nexport const getbrowseByBrandCategory = (city,BrandId,DepartmentId) => async dispatch => {\r\n    try\r\n    {\r\n        const response = await Api.get('brands/categoryBrowseby/'+BrandId+'/'+DepartmentId+\"/\"+city)\r\n        if(response.message === \"success\"){\r\n            dispatch({\r\n                    type : Type.browseByBrandCategorySuccess,\r\n                    payload : response.data\r\n                })\r\n            }\r\n        } catch(error){\r\n            dispatch({\r\n                type : Type.browseByBrandCategoryFailure,\r\n                payload : error.message\r\n            })\r\n            \r\n         \r\n        }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}