{"ast":null,"code":"import Api from '../../Config/Api';\nimport Type from './Types';\nexport const placeOrder = (order, type, city) => async dispatch => {\n  try {\n    const body = order;\n    const response = await Api.post('checkout/' + type + '/' + city, body);\n    if (response.message === \"success\") {\n      dispatch({\n        type: Type.checkoutSuccess,\n        payload: response.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: Type.checkoutFailure,\n      payload: error.message\n    });\n  }\n};\nexport const addreipient = (name, number, userid, city) => {\n  try {\n    return async dispatch => {\n      const cartitems = {\n        name: name,\n        number: number,\n        userid: userid,\n        city: city\n      };\n      const response = await Api.post(\"checkout/addrecipient\", cartitems, {\n        headers: {\n          'Content-Type': 'multipart/mixed'\n        }\n      });\n      if (response.data) {\n        dispatch({\n          type: Type.addreceipentSuccess,\n          payload: response.data.insertid\n        });\n      } else {\n        console.log('Unable to fetch data from the API BASE URL!');\n      }\n    };\n  } catch (error) {\n    // Add custom logic to handle errors\n    console.log(error);\n    // Add custom logic to handle errors\n  }\n};\n\nexport const placehomeOrder = (type, city, shipid) => async dispatch => {\n  try {\n    const response = await Api.post('homeordercheckout/' + type + '/' + city + '/' + shipid);\n    if (response.message === \"success\") {\n      dispatch({\n        type: Type.homecheckoutSuccess,\n        payload: response.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: Type.checkoutFailure,\n      payload: error.message\n    });\n  }\n};\nexport const placepickOrder = (type, city, shipid) => async dispatch => {\n  try {\n    const response = await Api.post('homeordercheckout/' + type + '/' + city + '/' + shipid);\n    if (response.message === \"success\") {\n      dispatch({\n        type: Type.homecheckoutSuccess,\n        payload: response.data\n      }).then(() => {\n        window.replace('/success');\n      }).catch(err => {});\n    }\n  } catch (error) {\n    dispatch({\n      type: Type.checkoutFailure,\n      payload: error.message\n    }).then(() => {\n      window.replace('/success');\n    }).catch(err => {\n      // Process error code\n    });\n  }\n};\nexport const placepickuporder = (type, city, userid, day) => async dispatch => {\n  try {\n    const response = await Api.post('pickordercheckout/' + type + '/' + city + '/' + userid + \"/\" + day);\n    if (response.message === \"success\") {\n      dispatch({\n        type: Type.pickcheckoutSuccess,\n        payload: response.data\n      }).then(() => {\n        window.replace('/success');\n      }).catch(err => {\n        // Process error code\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: Type.checkoutFailure,\n      payload: error.message\n    }).then(() => {\n      window.replace('/success');\n    }).catch(err => {\n      // Process error code\n    });\n  }\n};","map":{"version":3,"names":["Api","Type","placeOrder","order","type","city","dispatch","body","response","post","message","checkoutSuccess","payload","data","error","checkoutFailure","addreipient","name","number","userid","cartitems","headers","addreceipentSuccess","insertid","console","log","placehomeOrder","shipid","homecheckoutSuccess","placepickOrder","then","window","replace","catch","err","placepickuporder","day","pickcheckoutSuccess"],"sources":["D:/react/website/finalcode/src/Redux/Action/CheckoutAction.js"],"sourcesContent":["import Api from '../../Config/Api';\r\nimport Type from './Types';\r\n\r\nexport const placeOrder = (order, type, city) => async dispatch => {\r\n    try\r\n    {\r\n        const body = order;\r\n        const response = await Api.post('checkout/'+type+'/'+city,body)\r\n        if(response.message === \"success\"){\r\n            dispatch({\r\n                    type : Type.checkoutSuccess,\r\n                    payload : response.data\r\n                })\r\n            }\r\n            \r\n        } catch(error){\r\n            dispatch({\r\n                type : Type.checkoutFailure,\r\n                payload : error.message\r\n            })          \r\n         \r\n        }\r\n    } \r\n     export const addreipient = (name,number,userid,city) => {\r\n        \r\n        try {\r\n      \r\n        \r\n          return async dispatch => {\r\n             \r\n           const cartitems=\r\n            {\r\n              name: name,\r\n              number: number,\r\n              userid: userid,\r\n              city:city,\r\n               };\r\n            \r\n      \r\n            const response = await Api.post(\"checkout/addrecipient\",cartitems ,{\r\n              headers: {\r\n                  'Content-Type': 'multipart/mixed',\r\n                },\r\n          });\r\n  \r\n        if (response.data) {\r\n       \r\n          dispatch({\r\n            type: Type.addreceipentSuccess,\r\n            payload: response.data.insertid\r\n          });\r\n        } else {\r\n          console.log('Unable to fetch data from the API BASE URL!');\r\n        }\r\n      };\r\n      } catch (error) {\r\n      // Add custom logic to handle errors\r\n      console.log(error);\r\n          // Add custom logic to handle errors\r\n         \r\n        }\r\n      };\r\n    export const placehomeOrder = ( type, city,shipid) => async dispatch => {\r\n        try\r\n        {\r\n            \r\n            const response = await Api.post('homeordercheckout/'+type+'/'+city+'/'+shipid)\r\n            if(response.message === \"success\"){\r\n                dispatch({\r\n                        type : Type.homecheckoutSuccess,\r\n                        payload : response.data\r\n                    })\r\n                }\r\n                \r\n            } catch(error){\r\n                dispatch({\r\n                    type : Type.checkoutFailure,\r\n                    payload : error.message\r\n                })          \r\n             \r\n            }\r\n        } \r\n        export const placepickOrder = ( type, city,shipid) => async dispatch => {\r\n            try\r\n            {\r\n                \r\n                const response = await Api.post('homeordercheckout/'+type+'/'+city+'/'+shipid)\r\n                if(response.message === \"success\"){\r\n                    dispatch({\r\n                            type : Type.homecheckoutSuccess,\r\n                            payload : response.data\r\n                        }).then(() => {\r\n                            window.replace('/success')\r\n                        })\r\n                        .catch(err => {\r\n                            \r\n                                }\r\n                            );   \r\n                    }\r\n                    \r\n                } catch(error){\r\n                    dispatch({\r\n                        type : Type.checkoutFailure,\r\n                        payload : error.message\r\n                    }).then(() => {\r\n                        window.replace('/success')\r\n                    })\r\n                    .catch(err => {\r\n                        // Process error code\r\n                            }\r\n                        );        \r\n                 \r\n                }\r\n            } \r\n            export const placepickuporder = ( type, city,userid,day) => async dispatch => {\r\n                try\r\n                {\r\n                    \r\n                    const response = await Api.post('pickordercheckout/'+type+'/'+city+'/'+userid+\"/\"+day)\r\n                    if(response.message === \"success\"){\r\n                        dispatch({\r\n                                type : Type.pickcheckoutSuccess,\r\n                                payload : response.data\r\n                            }).then(() => {\r\n                                window.replace('/success')\r\n                            })\r\n                            .catch(err => {\r\n                                // Process error code\r\n                                    }\r\n                                );   \r\n                        }\r\n                        \r\n                    } catch(error){\r\n                        dispatch({\r\n                            type : Type.checkoutFailure,\r\n                            payload : error.message\r\n                        }).then(() => {\r\n                            window.replace('/success')\r\n                        })\r\n                        .catch(err => {\r\n                            // Process error code\r\n                                }\r\n                            );          \r\n                     \r\n                    }\r\n                } \r\n    \r\n\r\n    "],"mappings":"AAAA,OAAOA,GAAG,MAAM,kBAAkB;AAClC,OAAOC,IAAI,MAAM,SAAS;AAE1B,OAAO,MAAMC,UAAU,GAAGA,CAACC,KAAK,EAAEC,IAAI,EAAEC,IAAI,KAAK,MAAMC,QAAQ,IAAI;EAC/D,IACA;IACI,MAAMC,IAAI,GAAGJ,KAAK;IAClB,MAAMK,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,WAAW,GAACL,IAAI,GAAC,GAAG,GAACC,IAAI,EAACE,IAAI,CAAC;IAC/D,IAAGC,QAAQ,CAACE,OAAO,KAAK,SAAS,EAAC;MAC9BJ,QAAQ,CAAC;QACDF,IAAI,EAAGH,IAAI,CAACU,eAAe;QAC3BC,OAAO,EAAGJ,QAAQ,CAACK;MACvB,CAAC,CAAC;IACN;EAEJ,CAAC,CAAC,OAAMC,KAAK,EAAC;IACVR,QAAQ,CAAC;MACLF,IAAI,EAAGH,IAAI,CAACc,eAAe;MAC3BH,OAAO,EAAGE,KAAK,CAACJ;IACpB,CAAC,CAAC;EAEN;AACJ,CAAC;AACA,OAAO,MAAMM,WAAW,GAAGA,CAACC,IAAI,EAACC,MAAM,EAACC,MAAM,EAACd,IAAI,KAAK;EAErD,IAAI;IAGF,OAAO,MAAMC,QAAQ,IAAI;MAExB,MAAMc,SAAS,GACd;QACEH,IAAI,EAAEA,IAAI;QACVC,MAAM,EAAEA,MAAM;QACdC,MAAM,EAAEA,MAAM;QACdd,IAAI,EAACA;MACJ,CAAC;MAGJ,MAAMG,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,uBAAuB,EAACW,SAAS,EAAE;QACjEC,OAAO,EAAE;UACL,cAAc,EAAE;QAClB;MACN,CAAC,CAAC;MAEJ,IAAIb,QAAQ,CAACK,IAAI,EAAE;QAEjBP,QAAQ,CAAC;UACPF,IAAI,EAAEH,IAAI,CAACqB,mBAAmB;UAC9BV,OAAO,EAAEJ,QAAQ,CAACK,IAAI,CAACU;QACzB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;MAC5D;IACF,CAAC;EACD,CAAC,CAAC,OAAOX,KAAK,EAAE;IAChB;IACAU,OAAO,CAACC,GAAG,CAACX,KAAK,CAAC;IACd;EAEF;AACF,CAAC;;AACH,OAAO,MAAMY,cAAc,GAAGA,CAAEtB,IAAI,EAAEC,IAAI,EAACsB,MAAM,KAAK,MAAMrB,QAAQ,IAAI;EACpE,IACA;IAEI,MAAME,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,oBAAoB,GAACL,IAAI,GAAC,GAAG,GAACC,IAAI,GAAC,GAAG,GAACsB,MAAM,CAAC;IAC9E,IAAGnB,QAAQ,CAACE,OAAO,KAAK,SAAS,EAAC;MAC9BJ,QAAQ,CAAC;QACDF,IAAI,EAAGH,IAAI,CAAC2B,mBAAmB;QAC/BhB,OAAO,EAAGJ,QAAQ,CAACK;MACvB,CAAC,CAAC;IACN;EAEJ,CAAC,CAAC,OAAMC,KAAK,EAAC;IACVR,QAAQ,CAAC;MACLF,IAAI,EAAGH,IAAI,CAACc,eAAe;MAC3BH,OAAO,EAAGE,KAAK,CAACJ;IACpB,CAAC,CAAC;EAEN;AACJ,CAAC;AACD,OAAO,MAAMmB,cAAc,GAAGA,CAAEzB,IAAI,EAAEC,IAAI,EAACsB,MAAM,KAAK,MAAMrB,QAAQ,IAAI;EACpE,IACA;IAEI,MAAME,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,oBAAoB,GAACL,IAAI,GAAC,GAAG,GAACC,IAAI,GAAC,GAAG,GAACsB,MAAM,CAAC;IAC9E,IAAGnB,QAAQ,CAACE,OAAO,KAAK,SAAS,EAAC;MAC9BJ,QAAQ,CAAC;QACDF,IAAI,EAAGH,IAAI,CAAC2B,mBAAmB;QAC/BhB,OAAO,EAAGJ,QAAQ,CAACK;MACvB,CAAC,CAAC,CAACiB,IAAI,CAAC,MAAM;QACVC,MAAM,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9B,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI,CAEN,CACJ,CAAC;IACT;EAEJ,CAAC,CAAC,OAAMpB,KAAK,EAAC;IACVR,QAAQ,CAAC;MACLF,IAAI,EAAGH,IAAI,CAACc,eAAe;MAC3BH,OAAO,EAAGE,KAAK,CAACJ;IACpB,CAAC,CAAC,CAACoB,IAAI,CAAC,MAAM;MACVC,MAAM,CAACC,OAAO,CAAC,UAAU,CAAC;IAC9B,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;MACV;IAAA,CAEA,CAAC;EAET;AACJ,CAAC;AACD,OAAO,MAAMC,gBAAgB,GAAGA,CAAE/B,IAAI,EAAEC,IAAI,EAACc,MAAM,EAACiB,GAAG,KAAK,MAAM9B,QAAQ,IAAI;EAC1E,IACA;IAEI,MAAME,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,oBAAoB,GAACL,IAAI,GAAC,GAAG,GAACC,IAAI,GAAC,GAAG,GAACc,MAAM,GAAC,GAAG,GAACiB,GAAG,CAAC;IACtF,IAAG5B,QAAQ,CAACE,OAAO,KAAK,SAAS,EAAC;MAC9BJ,QAAQ,CAAC;QACDF,IAAI,EAAGH,IAAI,CAACoC,mBAAmB;QAC/BzB,OAAO,EAAGJ,QAAQ,CAACK;MACvB,CAAC,CAAC,CAACiB,IAAI,CAAC,MAAM;QACVC,MAAM,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9B,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;QACV;MAAA,CAEA,CAAC;IACT;EAEJ,CAAC,CAAC,OAAMpB,KAAK,EAAC;IACVR,QAAQ,CAAC;MACLF,IAAI,EAAGH,IAAI,CAACc,eAAe;MAC3BH,OAAO,EAAGE,KAAK,CAACJ;IACpB,CAAC,CAAC,CAACoB,IAAI,CAAC,MAAM;MACVC,MAAM,CAACC,OAAO,CAAC,UAAU,CAAC;IAC9B,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;MACV;IAAA,CAEA,CAAC;EAET;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}