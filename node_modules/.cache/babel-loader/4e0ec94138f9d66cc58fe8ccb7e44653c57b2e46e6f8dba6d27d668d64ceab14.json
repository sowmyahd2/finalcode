{"ast":null,"code":"import Api from \"../../Config/Api\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const fetchCity = createAsyncThunk('city/getPopularCity', async dispatch => {\n  try {\n    const response = await fetch(`${Api}/city`);\n    const json = await response.json();\n    console.log(json);\n    return json;\n  } catch (error) {\n    // Handle error\n    throw error;\n  }\n});\nexport const cityApi = createApi({\n  reducerPath: 'city',\n  baseQuery: fetchBaseQuery({\n    baseUrl: Api\n  }),\n  endpoints: builder => ({\n    getPopularCity: builder.query({\n      query: () => 'Useraccount/getpopularcity/'\n    })\n  })\n});\nconst citySlice = createSlice({\n  name: 'city',\n  initialState: {\n    selectedCity: 'mysuru',\n    cityList: [],\n    isLoading: false,\n    error: null\n  },\n  reducers: {\n    setCity: (state, action) => {\n      state.selectedCity = action.payload;\n    },\n    setCityList: (state, action) => {\n      state.cityList = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCity.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(fetchCity.fulfilled, (state, action) => {\n      state.cityList = action.payload.data;\n      state.isLoading = false;\n      state.error = null;\n    }).addCase(fetchCity.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  setCity,\n  setCityList\n} = citySlice.actions;\nexport default citySlice.reducer;","map":{"version":3,"names":["Api","createAsyncThunk","createSlice","createApi","fetchBaseQuery","fetchCity","dispatch","response","fetch","json","console","log","error","cityApi","reducerPath","baseQuery","baseUrl","endpoints","builder","getPopularCity","query","citySlice","name","initialState","selectedCity","cityList","isLoading","reducers","setCity","state","action","payload","setCityList","extraReducers","addCase","pending","fulfilled","data","rejected","message","actions","reducer"],"sources":["D:/react/website/finalcode/src/Redux/Slice/CitySlice.js"],"sourcesContent":["import Api from \"../../Config/Api\";\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const fetchCity = createAsyncThunk('city/getPopularCity', async (dispatch) => {\r\n  try {\r\n    const response = await fetch(`${Api}/city`);\r\n    const json = await response.json();\r\n    console.log(json);\r\n    return json;\r\n  } catch (error) {\r\n    // Handle error\r\n    throw error;\r\n  }\r\n});\r\n\r\nexport const cityApi = createApi({\r\n  reducerPath: 'city',\r\n  baseQuery: fetchBaseQuery({ baseUrl: Api }),\r\n  endpoints: (builder) => ({\r\n    getPopularCity: builder.query({\r\n      query: () => 'Useraccount/getpopularcity/',\r\n    }),\r\n  }),\r\n});\r\n\r\nconst citySlice = createSlice({\r\n  name: 'city',\r\n  initialState: {\r\n    selectedCity: 'mysuru',\r\n    cityList: [],\r\n    isLoading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    setCity: (state, action) => {\r\n      state.selectedCity = action.payload;\r\n    },\r\n    setCityList: (state, action) => {\r\n      state.cityList = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchCity.pending, (state) => {\r\n        state.isLoading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchCity.fulfilled, (state, action) => {\r\n        state.cityList = action.payload.data;\r\n        state.isLoading = false;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchCity.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setCity, setCityList } = citySlice.actions;\r\nexport default citySlice.reducer;   "],"mappings":"AAAA,OAAOA,GAAG,MAAM,kBAAkB;AAClC,SAASC,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,OAAO,MAAMC,SAAS,GAAGJ,gBAAgB,CAAC,qBAAqB,EAAE,MAAOK,QAAQ,IAAK;EACnF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAER,GAAI,OAAM,CAAC;IAC3C,MAAMS,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd;IACA,MAAMA,KAAK;EACb;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,OAAO,GAAGV,SAAS,CAAC;EAC/BW,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAEX,cAAc,CAAC;IAAEY,OAAO,EAAEhB;EAAI,CAAC,CAAC;EAC3CiB,SAAS,EAAGC,OAAO,KAAM;IACvBC,cAAc,EAAED,OAAO,CAACE,KAAK,CAAC;MAC5BA,KAAK,EAAEA,CAAA,KAAM;IACf,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAGnB,WAAW,CAAC;EAC5BoB,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,YAAY,EAAE,QAAQ;IACtBC,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,KAAK;IAChBd,KAAK,EAAE;EACT,CAAC;EACDe,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1BD,KAAK,CAACL,YAAY,GAAGM,MAAM,CAACC,OAAO;IACrC,CAAC;IACDC,WAAW,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACJ,QAAQ,GAAGK,MAAM,CAACC,OAAO;IACjC;EACF,CAAC;EACDE,aAAa,EAAGf,OAAO,IAAK;IAC1BA,OAAO,CACJgB,OAAO,CAAC7B,SAAS,CAAC8B,OAAO,EAAGN,KAAK,IAAK;MACrCA,KAAK,CAACH,SAAS,GAAG,IAAI;MACtBG,KAAK,CAACjB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDsB,OAAO,CAAC7B,SAAS,CAAC+B,SAAS,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACJ,QAAQ,GAAGK,MAAM,CAACC,OAAO,CAACM,IAAI;MACpCR,KAAK,CAACH,SAAS,GAAG,KAAK;MACvBG,KAAK,CAACjB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDsB,OAAO,CAAC7B,SAAS,CAACiC,QAAQ,EAAE,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC9CD,KAAK,CAACH,SAAS,GAAG,KAAK;MACvBG,KAAK,CAACjB,KAAK,GAAGkB,MAAM,CAAClB,KAAK,CAAC2B,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEX,OAAO;EAAEI;AAAY,CAAC,GAAGX,SAAS,CAACmB,OAAO;AACzD,eAAenB,SAAS,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}