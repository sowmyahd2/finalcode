{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport BASE_URL from '../../Config/apii';\nexport const fetchUser = createAsyncThunk('Useraccount/logindetail', async (body, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  try {\n    const response = await fetch(`${BASE_URL}Useraccount/logindetail`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to send OTP');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const sendOtp = createAsyncThunk('user/sendOtp', async (body, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n  try {\n    const response = await fetch(`${BASE_URL}Useraccount/sendotp`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to send OTP');\n    }\n    const data = await response.json();\n    return {\n      mobile: body.number,\n      otp: body.otp\n    };\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: [],\n    otp: \"\",\n    mobile: \"\",\n    isLoading: false,\n    error: null,\n    UserId: \"\"\n  },\n  reducers: {\n    setUser: (state, action) => {\n      // Update the state with the new user data\n      state.user = action.payload.data;\n      state.UserId = action.payload.data.UserId;\n    },\n    logoutUser: state => {\n      // Clear the user data in the state\n      state.user = [];\n      state.otp = \"\";\n      state.mobile = \"\";\n      state.UserId = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchUser.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(fetchUser.fulfilled, (state, action) => {\n      state.user = action.payload.data;\n      state.UserId = action.payload.data.UserId;\n      state.isLoading = false;\n      state.error = null;\n    }).addCase(fetchUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }).addCase(sendOtp.fulfilled, (state, action) => {\n      state.mobile = action.payload.mobile;\n      state.otp = action.payload.otp;\n      state.isLoading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","createApi","fetchBaseQuery","BASE_URL","fetchUser","body","_ref","rejectWithValue","response","fetch","method","headers","JSON","stringify","ok","Error","data","json","error","message","sendOtp","_ref2","mobile","number","otp","userSlice","name","initialState","user","isLoading","UserId","reducers","setUser","state","action","payload","logoutUser","extraReducers","builder","addCase","pending","fulfilled","rejected","reducer"],"sources":["D:/react/website/finalcode/src/Redux/Slice/userSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nimport BASE_URL from '../../Config/apii';\r\n\r\nexport const fetchUser = createAsyncThunk(\r\n  'Useraccount/logindetail',\r\n async (body, { rejectWithValue }) => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}Useraccount/logindetail`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(body),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to send OTP');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\nexport const sendOtp = createAsyncThunk(\r\n  'user/sendOtp',\r\n  async (body, { rejectWithValue }) => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}Useraccount/sendotp`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(body),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to send OTP');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return {\r\n        mobile: body.number,\r\n        otp: body.otp,\r\n      };\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\n\r\n\r\nconst userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: [],\r\n    otp:\"\",\r\n    mobile:\"\",\r\n    isLoading: false,\r\n    error: null,\r\n    UserId:\"\",\r\n  },\r\n  reducers: {\r\n  setUser: (state, action) => {\r\n        // Update the state with the new user data\r\n        state.user = action.payload.data;\r\n        state.UserId = action.payload.data.UserId;\r\n      },\r\n  logoutUser: (state) => {\r\n        // Clear the user data in the state\r\n        state.user = [];\r\n        state.otp = \"\";\r\n        state.mobile = \"\";\r\n        state.UserId = \"\";\r\n      },},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchUser.pending, (state) => {\r\n        state.isLoading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchUser.fulfilled, (state, action) => {\r\n        state.user = action.payload.data;\r\n        state.UserId=action.payload.data.UserId;\r\n        state.isLoading = false;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchUser.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = action.payload;\r\n      })\r\n      .addCase(sendOtp.fulfilled, (state, action) => {\r\n        state.mobile = action.payload.mobile;\r\n        state.otp = action.payload.otp;\r\n        state.isLoading = false;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\n\r\nexport default userSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}